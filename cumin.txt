public func register<>(pdid: String, _ fn: () -> ())  {
	_register(pdid, fn: cumin(fn))
}

public func register<A>(pdid: String, _ fn: (A) -> ())  {
	_register(pdid, fn: cumin(fn))
}

public func register<A, B>(pdid: String, _ fn: (A, B) -> ())  {
	_register(pdid, fn: cumin(fn))
}

public func register<A, B, C>(pdid: String, _ fn: (A, B, C) -> ())  {
	_register(pdid, fn: cumin(fn))
}

public func register<R>(pdid: String, _ fn: () -> (R))  {
	_register(pdid, fn: cumin(fn))
}

public func register<A, R>(pdid: String, _ fn: (A) -> (R))  {
	_register(pdid, fn: cumin(fn))
}

public func register<A, B, R>(pdid: String, _ fn: (A, B) -> (R))  {
	_register(pdid, fn: cumin(fn))
}

public func register<A, B, C, R>(pdid: String, _ fn: (A, B, C) -> (R))  {
	_register(pdid, fn: cumin(fn))
}

public func subscribe<>(pdid: String, _ fn: () -> ())  {
	_subscribe(pdid, fn: cumin(fn))
}

public func subscribe<A>(pdid: String, _ fn: (A) -> ())  {
	_subscribe(pdid, fn: cumin(fn))
}

public func subscribe<A, B>(pdid: String, _ fn: (A, B) -> ())  {
	_subscribe(pdid, fn: cumin(fn))
}

public func subscribe<A, B, C>(pdid: String, _ fn: (A, B, C) -> ())  {
	_subscribe(pdid, fn: cumin(fn))
}

func cumin<>(fn: () -> ()) -> ([AnyObject]) -> () {
	return { (args: [AnyObject]) in fn() }
}

func cumin<A>(fn: (A) -> ()) -> ([AnyObject]) -> () {
	return { (args: [AnyObject]) in fn(args[0] as! A) }
}

func cumin<A, B>(fn: (A, B) -> ()) -> ([AnyObject]) -> () {
	return { (args: [AnyObject]) in fn(args[0] as! A, args[1] as! B) }
}

func cumin<A, B, C>(fn: (A, B, C) -> ()) -> ([AnyObject]) -> () {
	return { (args: [AnyObject]) in fn(args[0] as! A, args[1] as! B, args[2] as! C) }
}

func cumin<R>(fn: () -> (R)) -> ([AnyObject]) -> (R) {
	return { (args: [AnyObject]) in fn() }
}

func cumin<A, R>(fn: (A) -> (R)) -> ([AnyObject]) -> (R) {
	return { (args: [AnyObject]) in fn(args[0] as! A) }
}

func cumin<A, B, R>(fn: (A, B) -> (R)) -> ([AnyObject]) -> (R) {
	return { (args: [AnyObject]) in fn(args[0] as! A, args[1] as! B) }
}

func cumin<A, B, C, R>(fn: (A, B, C) -> (R)) -> ([AnyObject]) -> (R) {
	return { (args: [AnyObject]) in fn(args[0] as! A, args[1] as! B, args[2] as! C) }
}

